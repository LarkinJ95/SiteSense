import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Shield,
  AlertTriangle,
  CheckCircle,
  Clock,
  FileText,
  Calendar,
  TrendingUp,
  AlertCircle
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";

interface ComplianceItem {
  id: string;
  surveyId: string;
  ruleId: string;
  status: 'compliant' | 'warning' | 'critical' | 'non_compliant';
  dueDate?: string;
  completedDate?: string;
  evidence?: string;
  notes?: string;
  assignedTo?: string;
  checkedBy?: string;
  lastChecked: string;
  autoGenerated: boolean;
  rule: {
    name: string;
    description?: string;
    regulatoryBody: string;
    ruleType: string;
    warningDays: number;
    criticalDays: number;
  };
  survey: {
    siteName: string;
    surveyType: string;
    surveyDate: string;
  };
}

interface ComplianceDashboardProps {
  surveyId?: string;
}

export function ComplianceDashboard({ surveyId }: ComplianceDashboardProps) {
  const [selectedStatus, setSelectedStatus] = useState<string>("all");
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch compliance tracking data
  const { data: complianceItems, isLoading } = useQuery({
    queryKey: ["/api/compliance-tracking", surveyId],
    queryFn: () => apiRequest("GET", `/api/compliance-tracking${surveyId ? `?surveyId=${surveyId}` : ''}`),
  });

  // Update compliance status
  const updateComplianceMutation = useMutation({
    mutationFn: async ({ itemId, updates }: { itemId: string; updates: any }) => {
      return await apiRequest("PUT", `/api/compliance-tracking/${itemId}`, updates);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/compliance-tracking"] });
      toast({
        title: "Compliance Updated",
        description: "Compliance status has been updated.",
      });
    },
  });

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'compliant': return 'bg-green-100 text-green-800';
      case 'warning': return 'bg-yellow-100 text-yellow-800';
      case 'critical': return 'bg-orange-100 text-orange-800';
      case 'non_compliant': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'compliant': return <CheckCircle className="h-4 w-4" />;
      case 'warning': return <Clock className="h-4 w-4" />;
      case 'critical': return <AlertTriangle className="h-4 w-4" />;
      case 'non_compliant': return <AlertCircle className="h-4 w-4" />;
      default: return <Shield className="h-4 w-4" />;
    }
  };

  const getRegulatoryBodyColor = (body: string) => {
    switch (body) {
      case 'EPA': return 'bg-blue-100 text-blue-800';
      case 'OSHA': return 'bg-orange-100 text-orange-800';
      case 'local_authority': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getDaysUntilDue = (dueDate: string) => {
    const due = new Date(dueDate);
    const now = new Date();
    const diffTime = due.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  // Calculate compliance statistics
  const stats = complianceItems?.reduce((acc: any, item: ComplianceItem) => {
    acc.total++;
    acc[item.status] = (acc[item.status] || 0) + 1;
    return acc;
  }, { total: 0, compliant: 0, warning: 0, critical: 0, non_compliant: 0 }) || {};

  const complianceRate = stats.total ? Math.round((stats.compliant / stats.total) * 100) : 0;

  // Filter compliance items
  const filteredItems = complianceItems?.filter((item: ComplianceItem) => {
    if (selectedStatus === "all") return true;
    return item.status === selectedStatus;
  });

  if (isLoading) {
    return <div className="flex justify-center py-8">Loading compliance data...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-lg font-semibold flex items-center">
            <Shield className="h-5 w-5 mr-2" />
            Compliance Dashboard
          </h3>
          <p className="text-sm text-gray-600">
            Monitor regulatory compliance and due dates
          </p>
        </div>
      </div>

      {/* Compliance Overview Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Overall Rate</p>
                <p className="text-2xl font-bold text-green-600">{complianceRate}%</p>
              </div>
              <TrendingUp className="h-8 w-8 text-green-500" />
            </div>
            <Progress value={complianceRate} className="mt-2" />
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Compliant</p>
                <p className="text-2xl font-bold text-green-600">{stats.compliant || 0}</p>
              </div>
              <CheckCircle className="h-8 w-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Warning</p>
                <p className="text-2xl font-bold text-yellow-600">{stats.warning || 0}</p>
              </div>
              <Clock className="h-8 w-8 text-yellow-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Critical</p>
                <p className="text-2xl font-bold text-orange-600">{stats.critical || 0}</p>
              </div>
              <AlertTriangle className="h-8 w-8 text-orange-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Non-Compliant</p>
                <p className="text-2xl font-bold text-red-600">{stats.non_compliant || 0}</p>
              </div>
              <AlertCircle className="h-8 w-8 text-red-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="all" className="space-y-4">
        <TabsList>
          <TabsTrigger value="all" onClick={() => setSelectedStatus("all")}>
            All ({stats.total || 0})
          </TabsTrigger>
          <TabsTrigger value="critical" onClick={() => setSelectedStatus("critical")}>
            Critical ({stats.critical || 0})
          </TabsTrigger>
          <TabsTrigger value="warning" onClick={() => setSelectedStatus("warning")}>
            Warning ({stats.warning || 0})
          </TabsTrigger>
          <TabsTrigger value="compliant" onClick={() => setSelectedStatus("compliant")}>
            Compliant ({stats.compliant || 0})
          </TabsTrigger>
        </TabsList>

        <TabsContent value="all" className="space-y-4">
          {filteredItems?.length === 0 ? (
            <Card>
              <CardContent className="p-8 text-center">
                <Shield className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                <h4 className="text-lg font-medium mb-2">No Compliance Items</h4>
                <p className="text-gray-600">
                  Compliance tracking will appear here once rules are configured and surveys are assessed
                </p>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-4">
              {filteredItems?.map((item: ComplianceItem) => (
                <Card key={item.id}>
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <div>
                        <CardTitle className="text-base">{item.rule.name}</CardTitle>
                        <CardDescription>
                          {item.survey.siteName} - {item.survey.surveyType}
                        </CardDescription>
                      </div>
                      <div className="flex gap-2">
                        <Badge className={getStatusColor(item.status)}>
                          {getStatusIcon(item.status)}
                          <span className="ml-1">{item.status.replace('_', ' ')}</span>
                        </Badge>
                        <Badge className={getRegulatoryBodyColor(item.rule.regulatoryBody)}>
                          {item.rule.regulatoryBody}
                        </Badge>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                      <div>
                        <p className="text-sm text-gray-600">Rule Type</p>
                        <p className="font-medium">{item.rule.ruleType.replace('_', ' ')}</p>
                      </div>
                      {item.dueDate && (
                        <div>
                          <p className="text-sm text-gray-600">Due Date</p>
                          <p className="font-medium">
                            {new Date(item.dueDate).toLocaleDateString()}
                            <span className={`ml-2 text-xs ${
                              getDaysUntilDue(item.dueDate) < 0 ? 'text-red-600' :
                              getDaysUntilDue(item.dueDate) <= item.rule.criticalDays ? 'text-orange-600' :
                              getDaysUntilDue(item.dueDate) <= item.rule.warningDays ? 'text-yellow-600' :
                              'text-green-600'
                            }`}>
                              ({getDaysUntilDue(item.dueDate)} days)
                            </span>
                          </p>
                        </div>
                      )}
                      {item.completedDate && (
                        <div>
                          <p className="text-sm text-gray-600">Completed</p>
                          <p className="font-medium">{new Date(item.completedDate).toLocaleDateString()}</p>
                        </div>
                      )}
                      {item.assignedTo && (
                        <div>
                          <p className="text-sm text-gray-600">Assigned To</p>
                          <p className="font-medium">{item.assignedTo}</p>
                        </div>
                      )}
                    </div>

                    {item.rule.description && (
                      <div className="mb-4">
                        <p className="text-sm text-gray-600">Description</p>
                        <p className="text-sm">{item.rule.description}</p>
                      </div>
                    )}

                    {item.notes && (
                      <div className="mb-4">
                        <p className="text-sm text-gray-600">Notes</p>
                        <p className="text-sm bg-gray-50 dark:bg-gray-800 p-2 rounded">{item.notes}</p>
                      </div>
                    )}

                    <div className="flex justify-between items-center">
                      <div className="text-xs text-gray-500">
                        Last checked: {new Date(item.lastChecked).toLocaleString()}
                        {item.autoGenerated && (
                          <Badge variant="outline" className="ml-2 text-xs">
                            Auto-generated
                          </Badge>
                        )}
                      </div>
                      <div className="flex gap-2">
                        {item.status !== 'compliant' && (
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => updateComplianceMutation.mutate({
                              itemId: item.id,
                              updates: { 
                                status: 'compliant',
                                completedDate: new Date().toISOString(),
                                checkedBy: 'Current User' // Replace with actual user
                              }
                            })}
                          >
                            <CheckCircle className="h-4 w-4 mr-1" />
                            Mark Compliant
                          </Button>
                        )}
                        <Button size="sm" variant="outline">
                          <FileText className="h-4 w-4 mr-1" />
                          View Evidence
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>

        {/* Other tab contents would be the same structure, just filtered */}
        <TabsContent value="critical">
          {/* Same structure as "all" tab but filtered */}
        </TabsContent>
        
        <TabsContent value="warning">
          {/* Same structure as "all" tab but filtered */}
        </TabsContent>
        
        <TabsContent value="compliant">
          {/* Same structure as "all" tab but filtered */}
        </TabsContent>
      </Tabs>
    </div>
  );
}