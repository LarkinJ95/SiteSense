import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Switch } from "@/components/ui/switch";
import { Progress } from "@/components/ui/progress";
import { 
  Settings,
  Package,
  AlertTriangle,
  CheckCircle,
  Clock,
  Thermometer,
  Activity,
  BarChart3,
  FileCheck,
  MapPin,
  Camera,
  Scan,
  User,
  Plus,
  Edit,
  Trash2,
  Download,
  Upload,
  Wrench,
  Shield,
  Target,
  TrendingUp,
  AlertCircle
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { ChainOfCustody } from "@/components/chain-of-custody";

interface AirMonitoringEquipment {
  id: string;
  name: string;
  model: string;
  serialNumber: string;
  type: 'pump' | 'detector' | 'analyzer' | 'calibration';
  status: 'available' | 'in_use' | 'maintenance' | 'calibration' | 'out_of_service';
  lastCalibration: string;
  nextCalibration: string;
  location?: string;
  assignedTo?: string;
  notes?: string;
  specifications: {
    flowRateRange?: string;
    accuracy?: string;
    detectionLimit?: string;
    operatingTemp?: string;
  };
  maintenanceHistory: Array<{
    date: string;
    type: string;
    description: string;
    technician: string;
  }>;
  createdAt: string;
}

interface QualityControlCheck {
  id: string;
  sampleId: string;
  checkType: 'flow_rate' | 'calibration' | 'blank' | 'duplicate' | 'spike';
  result: 'pass' | 'fail' | 'warning';
  expectedValue?: number;
  actualValue: number;
  deviation: number;
  tolerance: number;
  performedBy: string;
  performedAt: string;
  notes?: string;
  correctedValue?: number;
  autoGenerated: boolean;
}

interface PELAlert {
  id: string;
  sampleId: string;
  analyte: string;
  measuredValue: number;
  pelValue: number;
  exceedanceLevel: number; // percentage over PEL
  severity: 'warning' | 'critical' | 'immediate';
  alertTime: string;
  acknowledged: boolean;
  acknowledgedBy?: string;
  correctiveActions?: string;
}

export default function AdvancedAirMonitoring() {
  const [activeTab, setActiveTab] = useState("equipment");
  const [selectedEquipment, setSelectedEquipment] = useState<string>("");
  const [isEquipmentModalOpen, setIsEquipmentModalOpen] = useState(false);
  const [isMaintenanceModalOpen, setIsMaintenanceModalOpen] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch equipment
  const { data: equipment, isLoading: equipmentLoading } = useQuery({
    queryKey: ["/api/air-monitoring/equipment"],
    queryFn: () => apiRequest("GET", "/api/air-monitoring/equipment"),
  });

  // Fetch quality control checks
  const { data: qcChecks, isLoading: qcLoading } = useQuery({
    queryKey: ["/api/air-monitoring/quality-control"],
    queryFn: () => apiRequest("GET", "/api/air-monitoring/quality-control"),
  });

  // Fetch PEL alerts
  const { data: pelAlerts, isLoading: pelLoading } = useQuery({
    queryKey: ["/api/air-monitoring/pel-alerts"],
    queryFn: () => apiRequest("GET", "/api/air-monitoring/pel-alerts"),
  });

  // Fetch air samples with PEL analysis
  const { data: samplesWithPEL } = useQuery({
    queryKey: ["/api/air-samples/pel-analysis"],
    queryFn: () => apiRequest("GET", "/api/air-samples/pel-analysis"),
  });

  const getEquipmentStatusColor = (status: string) => {
    switch (status) {
      case 'available': return 'bg-green-100 text-green-800';
      case 'in_use': return 'bg-blue-100 text-blue-800';
      case 'maintenance': return 'bg-yellow-100 text-yellow-800';
      case 'calibration': return 'bg-purple-100 text-purple-800';
      case 'out_of_service': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getQCResultColor = (result: string) => {
    switch (result) {
      case 'pass': return 'bg-green-100 text-green-800';
      case 'warning': return 'bg-yellow-100 text-yellow-800';
      case 'fail': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPELSeverityColor = (severity: string) => {
    switch (severity) {
      case 'warning': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'critical': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'immediate': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const acknowledgeAlert = useMutation({
    mutationFn: async ({ alertId, actions }: { alertId: string; actions?: string }) => {
      return await apiRequest("PUT", `/api/air-monitoring/pel-alerts/${alertId}/acknowledge`, { 
        correctiveActions: actions 
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/air-monitoring/pel-alerts"] });
      toast({
        title: "Alert Acknowledged",
        description: "PEL alert has been acknowledged and logged.",
      });
    },
  });

  // Calculate statistics
  const equipmentStats = equipment?.reduce((acc: any, item: AirMonitoringEquipment) => {
    acc.total++;
    acc[item.status] = (acc[item.status] || 0) + 1;
    return acc;
  }, { total: 0, available: 0, in_use: 0, maintenance: 0, calibration: 0, out_of_service: 0 }) || {};

  const qcStats = qcChecks?.reduce((acc: any, check: QualityControlCheck) => {
    acc.total++;
    acc[check.result] = (acc[check.result] || 0) + 1;
    return acc;
  }, { total: 0, pass: 0, warning: 0, fail: 0 }) || {};

  const activePELAlerts = pelAlerts?.filter((alert: PELAlert) => !alert.acknowledged) || [];

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">Advanced Air Monitoring</h1>
          <p className="text-gray-600">
            Equipment management, quality control, and automated PEL monitoring
          </p>
        </div>
        <div className="flex gap-2">
          {activePELAlerts.length > 0 && (
            <Badge className="bg-red-100 text-red-800 animate-pulse">
              <AlertTriangle className="h-3 w-3 mr-1" />
              {activePELAlerts.length} PEL Alert{activePELAlerts.length > 1 ? 's' : ''}
            </Badge>
          )}
        </div>
      </div>

      {/* Overview Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Equipment Available</p>
                <p className="text-2xl font-bold text-green-600">{equipmentStats.available || 0}</p>
              </div>
              <Package className="h-8 w-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">QC Pass Rate</p>
                <p className="text-2xl font-bold text-blue-600">
                  {qcStats.total ? Math.round((qcStats.pass / qcStats.total) * 100) : 0}%
                </p>
              </div>
              <CheckCircle className="h-8 w-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Active PEL Alerts</p>
                <p className="text-2xl font-bold text-red-600">{activePELAlerts.length}</p>
              </div>
              <AlertTriangle className="h-8 w-8 text-red-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Equipment in Use</p>
                <p className="text-2xl font-bold text-purple-600">{equipmentStats.in_use || 0}</p>
              </div>
              <Activity className="h-8 w-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="equipment">Equipment</TabsTrigger>
          <TabsTrigger value="quality-control">Quality Control</TabsTrigger>
          <TabsTrigger value="pel-alerts">PEL Alerts</TabsTrigger>
          <TabsTrigger value="chain-of-custody">Chain of Custody</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        {/* Equipment Management Tab */}
        <TabsContent value="equipment" className="space-y-4">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-semibold">Equipment Management</h3>
            <Button onClick={() => setIsEquipmentModalOpen(true)} data-testid="button-add-equipment">
              <Plus className="h-4 w-4 mr-2" />
              Add Equipment
            </Button>
          </div>

          <div className="grid gap-4">
            {equipment?.map((item: AirMonitoringEquipment) => (
              <Card key={item.id}>
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <div>
                      <CardTitle className="text-base">{item.name}</CardTitle>
                      <CardDescription>
                        {item.model} - Serial: {item.serialNumber}
                      </CardDescription>
                    </div>
                    <div className="flex gap-2">
                      <Badge className={getEquipmentStatusColor(item.status)}>
                        {item.status.replace('_', ' ')}
                      </Badge>
                      <Badge variant="outline">{item.type}</Badge>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                    <div>
                      <Label className="text-xs text-gray-600">Last Calibration</Label>
                      <p className="text-sm">{new Date(item.lastCalibration).toLocaleDateString()}</p>
                    </div>
                    <div>
                      <Label className="text-xs text-gray-600">Next Calibration</Label>
                      <p className="text-sm">
                        {new Date(item.nextCalibration).toLocaleDateString()}
                        {new Date(item.nextCalibration) < new Date() && (
                          <Badge className="ml-2 bg-red-100 text-red-800 text-xs">Overdue</Badge>
                        )}
                      </p>
                    </div>
                    {item.location && (
                      <div>
                        <Label className="text-xs text-gray-600">Location</Label>
                        <p className="text-sm">{item.location}</p>
                      </div>
                    )}
                    {item.assignedTo && (
                      <div>
                        <Label className="text-xs text-gray-600">Assigned To</Label>
                        <p className="text-sm">{item.assignedTo}</p>
                      </div>
                    )}
                  </div>

                  {item.specifications && (
                    <div className="mb-4">
                      <Label className="text-xs text-gray-600">Specifications</Label>
                      <div className="grid grid-cols-2 gap-2 mt-1">
                        {item.specifications.flowRateRange && (
                          <p className="text-xs">Flow Rate: {item.specifications.flowRateRange}</p>
                        )}
                        {item.specifications.accuracy && (
                          <p className="text-xs">Accuracy: {item.specifications.accuracy}</p>
                        )}
                        {item.specifications.detectionLimit && (
                          <p className="text-xs">Detection Limit: {item.specifications.detectionLimit}</p>
                        )}
                        {item.specifications.operatingTemp && (
                          <p className="text-xs">Operating Temp: {item.specifications.operatingTemp}</p>
                        )}
                      </div>
                    </div>
                  )}

                  <div className="flex justify-between items-center">
                    <div className="text-xs text-gray-500">
                      Maintenance History: {item.maintenanceHistory?.length || 0} records
                    </div>
                    <div className="flex gap-2">
                      <Button size="sm" variant="outline">
                        <Edit className="h-4 w-4 mr-1" />
                        Edit
                      </Button>
                      <Button size="sm" variant="outline">
                        <Wrench className="h-4 w-4 mr-1" />
                        Maintenance
                      </Button>
                      <Button size="sm" variant="outline">
                        <FileCheck className="h-4 w-4 mr-1" />
                        Calibrate
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Quality Control Tab */}
        <TabsContent value="quality-control" className="space-y-4">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-semibold">Quality Control Checks</h3>
            <div className="flex gap-2">
              <Badge className="bg-green-100 text-green-800">
                Pass: {qcStats.pass || 0}
              </Badge>
              <Badge className="bg-yellow-100 text-yellow-800">
                Warning: {qcStats.warning || 0}
              </Badge>
              <Badge className="bg-red-100 text-red-800">
                Fail: {qcStats.fail || 0}
              </Badge>
            </div>
          </div>

          <div className="space-y-4">
            {qcChecks?.map((check: QualityControlCheck) => (
              <Card key={check.id}>
                <CardContent className="p-4">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h4 className="font-medium">Sample: {check.sampleId}</h4>
                      <p className="text-sm text-gray-600">{check.checkType.replace('_', ' ')}</p>
                    </div>
                    <Badge className={getQCResultColor(check.result)}>
                      {check.result}
                    </Badge>
                  </div>

                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                    {check.expectedValue && (
                      <div>
                        <Label className="text-xs text-gray-600">Expected Value</Label>
                        <p className="text-sm font-medium">{check.expectedValue}</p>
                      </div>
                    )}
                    <div>
                      <Label className="text-xs text-gray-600">Actual Value</Label>
                      <p className="text-sm font-medium">{check.actualValue}</p>
                    </div>
                    <div>
                      <Label className="text-xs text-gray-600">Deviation</Label>
                      <p className={`text-sm font-medium ${
                        Math.abs(check.deviation) > check.tolerance ? 'text-red-600' : 'text-green-600'
                      }`}>
                        {check.deviation > 0 ? '+' : ''}{check.deviation}%
                      </p>
                    </div>
                    <div>
                      <Label className="text-xs text-gray-600">Tolerance</Label>
                      <p className="text-sm">±{check.tolerance}%</p>
                    </div>
                  </div>

                  <div className="flex justify-between items-center">
                    <div className="text-xs text-gray-500">
                      Performed by {check.performedBy} on {new Date(check.performedAt).toLocaleString()}
                      {check.autoGenerated && (
                        <Badge variant="outline" className="ml-2 text-xs">Auto-generated</Badge>
                      )}
                    </div>
                    {check.correctedValue && (
                      <div className="text-sm">
                        Corrected Value: <span className="font-medium">{check.correctedValue}</span>
                      </div>
                    )}
                  </div>

                  {check.notes && (
                    <div className="mt-3 p-2 bg-gray-50 dark:bg-gray-800 rounded">
                      <p className="text-sm">{check.notes}</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* PEL Alerts Tab */}
        <TabsContent value="pel-alerts" className="space-y-4">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-semibold">PEL Monitoring & Alerts</h3>
            <div className="text-sm text-gray-600">
              Real-time monitoring for Permissible Exposure Limits
            </div>
          </div>

          {/* Active Alerts */}
          {activePELAlerts.length > 0 && (
            <div className="space-y-4">
              <h4 className="text-md font-medium text-red-600">Active Alerts</h4>
              {activePELAlerts.map((alert: PELAlert) => (
                <Card key={alert.id} className="border-red-200 bg-red-50 dark:bg-red-950">
                  <CardContent className="p-4">
                    <div className="flex justify-between items-start mb-4">
                      <div>
                        <h4 className="font-medium text-red-800 dark:text-red-200">
                          {alert.analyte} Exceedance
                        </h4>
                        <p className="text-sm text-red-600 dark:text-red-400">
                          Sample: {alert.sampleId}
                        </p>
                      </div>
                      <Badge className={getPELSeverityColor(alert.severity)}>
                        <AlertTriangle className="h-3 w-3 mr-1" />
                        {alert.severity}
                      </Badge>
                    </div>

                    <div className="grid grid-cols-3 gap-4 mb-4">
                      <div>
                        <Label className="text-xs text-gray-600">Measured Value</Label>
                        <p className="text-sm font-bold text-red-700">
                          {alert.measuredValue} mg/m³
                        </p>
                      </div>
                      <div>
                        <Label className="text-xs text-gray-600">PEL Limit</Label>
                        <p className="text-sm font-medium">{alert.pelValue} mg/m³</p>
                      </div>
                      <div>
                        <Label className="text-xs text-gray-600">Exceedance</Label>
                        <p className="text-sm font-bold text-red-700">
                          {alert.exceedanceLevel}% over PEL
                        </p>
                      </div>
                    </div>

                    <div className="mb-4">
                      <Progress 
                        value={Math.min((alert.measuredValue / alert.pelValue) * 100, 200)} 
                        className="h-3"
                      />
                      <div className="flex justify-between text-xs text-gray-600 mt-1">
                        <span>0</span>
                        <span>PEL Limit</span>
                        <span>200%</span>
                      </div>
                    </div>

                    <div className="flex justify-between items-center">
                      <div className="text-xs text-gray-600">
                        Alert Time: {new Date(alert.alertTime).toLocaleString()}
                      </div>
                      <div className="flex gap-2">
                        <Dialog>
                          <DialogTrigger asChild>
                            <Button size="sm" variant="outline">
                              <Shield className="h-4 w-4 mr-1" />
                              Acknowledge
                            </Button>
                          </DialogTrigger>
                          <DialogContent>
                            <DialogHeader>
                              <DialogTitle>Acknowledge PEL Alert</DialogTitle>
                              <DialogDescription>
                                Document corrective actions taken to address this exposure exceedance
                              </DialogDescription>
                            </DialogHeader>
                            <div className="space-y-4">
                              <Textarea 
                                placeholder="Describe corrective actions taken..."
                                data-testid="textarea-corrective-actions"
                              />
                              <div className="flex justify-end gap-2">
                                <Button variant="outline">Cancel</Button>
                                <Button 
                                  onClick={() => acknowledgeAlert.mutate({ 
                                    alertId: alert.id, 
                                    actions: "Corrective actions documented" 
                                  })}
                                >
                                  <CheckCircle className="h-4 w-4 mr-1" />
                                  Acknowledge Alert
                                </Button>
                              </div>
                            </div>
                          </DialogContent>
                        </Dialog>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}

          {/* All Alerts History */}
          <div className="space-y-4">
            <h4 className="text-md font-medium">Alert History</h4>
            {pelAlerts?.map((alert: PELAlert) => (
              <Card key={alert.id} className={alert.acknowledged ? '' : 'border-red-200'}>
                <CardContent className="p-4">
                  <div className="flex justify-between items-start">
                    <div>
                      <h4 className="font-medium">{alert.analyte} - {alert.sampleId}</h4>
                      <p className="text-sm text-gray-600">
                        {alert.measuredValue} mg/m³ (PEL: {alert.pelValue} mg/m³)
                      </p>
                    </div>
                    <div className="flex gap-2">
                      <Badge className={getPELSeverityColor(alert.severity)}>
                        {alert.severity}
                      </Badge>
                      {alert.acknowledged && (
                        <Badge className="bg-green-100 text-green-800">
                          Acknowledged
                        </Badge>
                      )}
                    </div>
                  </div>
                  {alert.acknowledgedBy && (
                    <p className="text-xs text-gray-500 mt-2">
                      Acknowledged by {alert.acknowledgedBy}
                    </p>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Chain of Custody Tab */}
        <TabsContent value="chain-of-custody" className="space-y-4">
          <ChainOfCustody />
        </TabsContent>

        {/* Analytics Tab */}
        <TabsContent value="analytics" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-base">Equipment Utilization</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {Object.entries(equipmentStats).filter(([key]) => key !== 'total').map(([status, count]) => (
                    <div key={status} className="flex justify-between items-center">
                      <span className="text-sm capitalize">{status.replace('_', ' ')}</span>
                      <div className="flex items-center gap-2">
                        <Progress value={(count as number / equipmentStats.total) * 100} className="w-20 h-2" />
                        <span className="text-sm font-medium">{count}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-base">Quality Control Summary</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm">Pass Rate</span>
                    <span className="text-lg font-bold text-green-600">
                      {qcStats.total ? Math.round((qcStats.pass / qcStats.total) * 100) : 0}%
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm">Total Checks</span>
                    <span className="font-medium">{qcStats.total}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm">Failed Checks</span>
                    <span className="font-medium text-red-600">{qcStats.fail || 0}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Sample Results with PEL Analysis */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base">PEL Analysis Summary</CardTitle>
              <CardDescription>
                Automated analysis of sample results against permissible exposure limits
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {samplesWithPEL?.map((sample: any) => (
                  <div key={sample.id} className="border rounded p-4">
                    <div className="flex justify-between items-start mb-3">
                      <div>
                        <h4 className="font-medium">{sample.analyte} - {sample.id}</h4>
                        <p className="text-sm text-gray-600">{sample.location}</p>
                      </div>
                      <div className="flex gap-2">
                        {sample.results?.map((result: any) => {
                          const exceedsPEL = result.concentration > result.pelLimit;
                          return (
                            <Badge 
                              key={result.analyte}
                              className={exceedsPEL ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}
                            >
                              {result.analyte}: {result.concentration} mg/m³
                              {exceedsPEL && <AlertTriangle className="h-3 w-3 ml-1" />}
                            </Badge>
                          );
                        })}
                      </div>
                    </div>
                    
                    {sample.results?.some((r: any) => r.concentration > r.pelLimit) && (
                      <div className="bg-red-50 dark:bg-red-950 p-3 rounded">
                        <p className="text-sm text-red-800 dark:text-red-200 flex items-center">
                          <AlertTriangle className="h-4 w-4 mr-2" />
                          PEL Exceedance Detected - Immediate attention required
                        </p>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}